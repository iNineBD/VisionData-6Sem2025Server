name: CI-Server

on:
  pull_request:
    branches:
      - 'API/**'
      - develop
      - 'sprint/**'
      - main
      - prod
  push:
    branches:
      - 'API/**'
      - develop
      - 'sprint/**'
      - main
      - prod

permissions:
  contents: read

jobs:
  # --------- server GO ---------
  go-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'
          cache: true

      # Lint/format (fail se houver arquivos não formatados)
      - name: gofmt check
        run: |
          fmt_out=$(gofmt -l .)
          if [ -n "$fmt_out" ]; then
            echo "Arquivos não formatados:"
            echo "$fmt_out"
            exit 1
          fi

      - name: Vet # encontra erros comuns no código
        run: go vet ./...

      - name: Test (all packages + race + coverage) # roda os testes e gera coverage
        run: go test ./... -race -cover -coverprofile=coverage.out

      - name: Build # compila o binário
        run: go build -o visiondata ./cmd/api/main.go

      - name: Pacote (tar.gz) # empacota o binário
        run: tar -czf visiondata.tar.gz visiondata

      - name: Upload artifact (bin) # faz upload do binário empacotado, pode ser baixado posteriormente pelo githubactions
        uses: actions/upload-artifact@v4
        with:
          name: visiondata
          path: visiondata.tar.gz

      - name: Coverage Report # publica o relatório de coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  # --------- SONARCLOUD (qualidade de código) ---------
  sonarqube:
    runs-on: ubuntu-latest
    needs: [go-ci]
    if: ${{ github.event_name == 'pull_request' || github.ref != 'refs/heads/API/**' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: coverage
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_SERVER_TOKEN }}
