basePath: /
definitions:
  dto.AssignedAgent:
    properties:
      department:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
    type: object
  dto.AuthErrorResponse:
    properties:
      code:
        example: 401
        type: integer
      error:
        example: unauthorized
        type: string
      login_url:
        example: /auth/login
        type: string
      message:
        example: Token de autorização inválido ou expirado
        type: string
      request_id:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  dto.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.Company:
    properties:
      cnpj:
        type: string
      id:
        type: integer
      name:
        type: string
      segment:
        type: string
    type: object
  dto.CreatedByUser:
    properties:
      cpf:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      is_vip:
        type: boolean
      phone:
        type: string
    type: object
  dto.Dates:
    properties:
      closed_at: {}
      created_at: {}
      first_response_at: {}
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: integer
      details: {}
      error:
        type: string
      message:
        type: string
      request_id:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  dto.HealthResponse:
    properties:
      checks:
        additionalProperties:
          type: string
        type: object
      request_id:
        type: string
      service:
        example: VisionData API
        type: string
      status:
        example: OK
        type: string
      success:
        type: boolean
      timestamp:
        type: string
      uptime:
        example: 1h30m45s
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  dto.MetricValue:
    properties:
      name:
        type: string
      value:
        type: integer
    type: object
  dto.PaginatedResponse:
    properties:
      data: {}
      message:
        type: string
      pagination:
        $ref: '#/definitions/dto.Pagination'
      request_id:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  dto.Pagination:
    properties:
      current_page:
        example: 1
        type: integer
      has_next:
        example: true
        type: boolean
      has_prev:
        example: false
        type: boolean
      per_page:
        example: 10
        type: integer
      total_pages:
        example: 5
        type: integer
      total_records:
        example: 50
        type: integer
    type: object
  dto.Product:
    properties:
      code:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.RateLimitErrorResponse:
    properties:
      code:
        example: 429
        type: integer
      error:
        example: rate_limit_exceeded
        type: string
      limit:
        example: 100
        type: integer
      message:
        example: Limite de requisições excedido
        type: string
      remaining:
        example: 0
        type: integer
      request_id:
        type: string
      reset_time:
        example: "2024-01-01T12:01:00Z"
        type: string
      retry_after:
        example: 60s
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  dto.SLAMetrics:
    properties:
      first_response_sla_breached:
        type: boolean
      first_response_time_minutes: {}
      resolution_sla_breached:
        type: boolean
      resolution_time_minutes: {}
    type: object
  dto.Ticket:
    properties:
      assigned_agent:
        $ref: '#/definitions/dto.AssignedAgent'
      attachments:
        items: {}
        type: array
      audit_logs:
        items: {}
        type: array
      category:
        $ref: '#/definitions/dto.Category'
      channel:
        type: string
      company:
        $ref: '#/definitions/dto.Company'
      created_by_user:
        $ref: '#/definitions/dto.CreatedByUser'
      current_status:
        type: integer
      dates:
        $ref: '#/definitions/dto.Dates'
      description:
        type: string
      device:
        type: string
      priority:
        type: string
      product:
        $ref: '#/definitions/dto.Product'
      search_text:
        type: string
      sla_metrics:
        $ref: '#/definitions/dto.SLAMetrics'
      sla_plan:
        type: integer
      status_history:
        items: {}
        type: array
      subcategory:
        $ref: '#/definitions/dto.Category'
      tags:
        items: {}
        type: array
      ticket_id:
        type: string
      title:
        type: string
    type: object
  dto.TicketsMetricsResponse:
    properties:
      metrics:
        items:
          $ref: '#/definitions/dto.TypeMetric'
        type: array
      totalTickets:
        type: integer
    type: object
  dto.TypeMetric:
    properties:
      name:
        type: string
      values:
        items:
          $ref: '#/definitions/dto.MetricValue'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: https://github.com/iNineBD
    name: Inine
  description: API REST para aplicação VisionData com recursos de autenticação, rate
    limiting e monitoramento.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: VisionData API
  version: "1.0"
paths:
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Verifica a saúde do serviço. Endpoint protegido com autenticação
        e rate limiting.
      produces:
      - application/json
      responses:
        "200":
          description: Status do serviço
          headers:
            X-RateLimit-Limit:
              description: Limite de requests por minuto
              type: string
            X-RateLimit-Remaining:
              description: Requests restantes no período
              type: string
            X-RateLimit-Reset:
              description: Timestamp do reset do rate limit
              type: string
          schema:
            $ref: '#/definitions/dto.HealthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - Token inválido
          schema:
            $ref: '#/definitions/dto.AuthErrorResponse'
        "403":
          description: Forbidden - Sem permissão
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "429":
          description: Rate limit excedido
          schema:
            $ref: '#/definitions/dto.RateLimitErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Health Check
      tags:
      - health
  /metrics/tickets:
    get:
      consumes:
      - application/json
      description: Retorna métricas agregadas dos tickets por categoria, prioridade,
        canal e tag
      produces:
      - application/json
      responses:
        "200":
          description: Tickets metrics retrieved successfully
          headers:
            X-RateLimit-Limit:
              description: Requests per minute limit
              type: string
            X-RateLimit-Remaining:
              description: Remaining requests in the period
              type: string
            X-RateLimit-Reset:
              description: Rate limit reset timestamp
              type: string
          schema:
            $ref: '#/definitions/dto.TicketsMetricsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - Invalid token
          schema:
            $ref: '#/definitions/dto.AuthErrorResponse'
        "403":
          description: Forbidden - No permission
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/dto.RateLimitErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Métricas de Tickets
      tags:
      - metrics
  /tickets/{id}:
    get:
      consumes:
      - application/json
      description: Returns a single ticket matching the provided ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Ticket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get ticket by ID
      tags:
      - tickets
  /tickets/query:
    get:
      consumes:
      - application/json
      description: Returns tickets matching the search query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Number of items per page
        in: query
        maximum: 100
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.Ticket'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Search tickets by query word
      tags:
      - tickets
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
