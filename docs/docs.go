// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Inine",
            "email": "https://github.com/iNineBD"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthcheck": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verifica a saúde do serviço. Endpoint protegido com autenticação e rate limiting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Status do serviço",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthResponse"
                        },
                        "headers": {
                            "X-RateLimit-Limit": {
                                "type": "string",
                                "description": "Limite de requests por minuto"
                            },
                            "X-RateLimit-Remaining": {
                                "type": "string",
                                "description": "Requests restantes no período"
                            },
                            "X-RateLimit-Reset": {
                                "type": "string",
                                "description": "Timestamp do reset do rate limit"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token inválido",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Sem permissão",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit excedido",
                        "schema": {
                            "$ref": "#/definitions/dto.RateLimitErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/tickets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna métricas agregadas dos tickets por categoria, prioridade, canal e tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Métricas de Tickets",
                "responses": {
                    "200": {
                        "description": "Tickets metrics retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TicketsMetricsResponse"
                        },
                        "headers": {
                            "X-RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests per minute limit"
                            },
                            "X-RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the period"
                            },
                            "X-RateLimit-Reset": {
                                "type": "string",
                                "description": "Rate limit reset timestamp"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - No permission",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/dto.RateLimitErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets/query": {
            "get": {
                "description": "Returns tickets matching the search query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Search tickets by query word",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.Ticket"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets/{id}": {
            "get": {
                "description": "Returns a single ticket matching the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Get ticket by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Ticket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AssignedAgent": {
            "type": "object",
            "properties": {
                "department": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.AuthErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "error": {
                    "type": "string",
                    "example": "unauthorized"
                },
                "login_url": {
                    "type": "string",
                    "example": "/auth/login"
                },
                "message": {
                    "type": "string",
                    "example": "Token de autorização inválido ou expirado"
                },
                "request_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.Company": {
            "type": "object",
            "properties": {
                "cnpj": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "segment": {
                    "type": "string"
                }
            }
        },
        "dto.CreatedByUser": {
            "type": "object",
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_vip": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "dto.Dates": {
            "type": "object",
            "properties": {
                "closed_at": {},
                "created_at": {},
                "first_response_at": {}
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {},
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.HealthResponse": {
            "type": "object",
            "properties": {
                "checks": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "request_id": {
                    "type": "string"
                },
                "service": {
                    "type": "string",
                    "example": "VisionData API"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string",
                    "example": "1h30m45s"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "dto.MetricValue": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "dto.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "pagination": {
                    "$ref": "#/definitions/dto.Pagination"
                },
                "request_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.Pagination": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "has_next": {
                    "type": "boolean",
                    "example": true
                },
                "has_prev": {
                    "type": "boolean",
                    "example": false
                },
                "per_page": {
                    "type": "integer",
                    "example": 10
                },
                "total_pages": {
                    "type": "integer",
                    "example": 5
                },
                "total_records": {
                    "type": "integer",
                    "example": 50
                }
            }
        },
        "dto.Product": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.RateLimitErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 429
                },
                "error": {
                    "type": "string",
                    "example": "rate_limit_exceeded"
                },
                "limit": {
                    "type": "integer",
                    "example": 100
                },
                "message": {
                    "type": "string",
                    "example": "Limite de requisições excedido"
                },
                "remaining": {
                    "type": "integer",
                    "example": 0
                },
                "request_id": {
                    "type": "string"
                },
                "reset_time": {
                    "type": "string",
                    "example": "2024-01-01T12:01:00Z"
                },
                "retry_after": {
                    "type": "string",
                    "example": "60s"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.SLAMetrics": {
            "type": "object",
            "properties": {
                "first_response_sla_breached": {
                    "type": "boolean"
                },
                "first_response_time_minutes": {},
                "resolution_sla_breached": {
                    "type": "boolean"
                },
                "resolution_time_minutes": {}
            }
        },
        "dto.Ticket": {
            "type": "object",
            "properties": {
                "assigned_agent": {
                    "$ref": "#/definitions/dto.AssignedAgent"
                },
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "audit_logs": {
                    "type": "array",
                    "items": {}
                },
                "category": {
                    "$ref": "#/definitions/dto.Category"
                },
                "channel": {
                    "type": "string"
                },
                "company": {
                    "$ref": "#/definitions/dto.Company"
                },
                "created_by_user": {
                    "$ref": "#/definitions/dto.CreatedByUser"
                },
                "current_status": {
                    "type": "integer"
                },
                "dates": {
                    "$ref": "#/definitions/dto.Dates"
                },
                "description": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "product": {
                    "$ref": "#/definitions/dto.Product"
                },
                "search_text": {
                    "type": "string"
                },
                "sla_metrics": {
                    "$ref": "#/definitions/dto.SLAMetrics"
                },
                "sla_plan": {
                    "type": "integer"
                },
                "status_history": {
                    "type": "array",
                    "items": {}
                },
                "subcategory": {
                    "$ref": "#/definitions/dto.Category"
                },
                "tags": {
                    "type": "array",
                    "items": {}
                },
                "ticket_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.TicketsMetricsResponse": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TypeMetric"
                    }
                },
                "totalTickets": {
                    "type": "integer"
                }
            }
        },
        "dto.TypeMetric": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MetricValue"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "VisionData API",
	Description:      "API REST para aplicação VisionData com recursos de autenticação, rate limiting e monitoramento.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
